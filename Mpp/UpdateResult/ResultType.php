<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: mpp.proto

namespace Mpp\UpdateResult;

use UnexpectedValueException;

/**
 * result codes
 *
 * Protobuf type <code>mpp.UpdateResult.ResultType</code>
 */
class ResultType
{
    /**
     * success
     *
     * Generated from protobuf enum <code>OK = 0;</code>
     */
    const OK = 0;
    /**
     * update cancelled by user
     *
     * Generated from protobuf enum <code>CANCELLED = 1;</code>
     */
    const CANCELLED = 1;
    /**
     * update session timeout
     *
     * Generated from protobuf enum <code>TIMEOUT = 2;</code>
     */
    const TIMEOUT = 2;
    /**
     * update already running
     *
     * Generated from protobuf enum <code>BUSY = 3;</code>
     */
    const BUSY = 3;
    /**
     * update not running
     *
     * Generated from protobuf enum <code>NOT_RUNNING = 4;</code>
     */
    const NOT_RUNNING = 4;
    /**
     * unknown error
     *
     * Generated from protobuf enum <code>UNKNOWN_ERR = 5;</code>
     */
    const UNKNOWN_ERR = 5;
    /**
     * incorrect session
     *
     * Generated from protobuf enum <code>SESSION_ERR = 6;</code>
     */
    const SESSION_ERR = 6;
    /**
     * incorrect binary file size or CRC
     *
     * Generated from protobuf enum <code>FILE_ERR = 7;</code>
     */
    const FILE_ERR = 7;
    /**
     * incorrect update part sequence
     *
     * Generated from protobuf enum <code>SEQUENCE_ERR = 8;</code>
     */
    const SEQUENCE_ERR = 8;
    /**
     * network error
     *
     * Generated from protobuf enum <code>NETWORK_ERR = 9;</code>
     */
    const NETWORK_ERR = 9;
    /**
     * OTA error
     *
     * Generated from protobuf enum <code>OTA_ERR = 10;</code>
     */
    const OTA_ERR = 10;

    private static $valueToName = [
        self::OK => 'OK',
        self::CANCELLED => 'CANCELLED',
        self::TIMEOUT => 'TIMEOUT',
        self::BUSY => 'BUSY',
        self::NOT_RUNNING => 'NOT_RUNNING',
        self::UNKNOWN_ERR => 'UNKNOWN_ERR',
        self::SESSION_ERR => 'SESSION_ERR',
        self::FILE_ERR => 'FILE_ERR',
        self::SEQUENCE_ERR => 'SEQUENCE_ERR',
        self::NETWORK_ERR => 'NETWORK_ERR',
        self::OTA_ERR => 'OTA_ERR',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

