<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: mpp.proto

namespace Mpp;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 **
 *	Purpose:	Tranfers information about the current status of VU. The optional parameters can be determined if and
 *				only if the VU is not currently performing a remote data download.
 *	Reply:		N/D
 *
 * Generated from protobuf message <code>mpp.TachoTest</code>
 */
class TachoTest extends \Google\Protobuf\Internal\Message
{
    /**
     * VU is connected
     *
     * Generated from protobuf field <code>bool connected = 1;</code>
     */
    protected $connected = false;
    /**
     * connection is authenticated
     *
     * Generated from protobuf field <code>optional bool auth_valid = 2;</code>
     */
    protected $auth_valid = null;
    /**
     * driver ID, slot #1 (driver)
     *
     * Generated from protobuf field <code>optional string driver_id_0 = 3;</code>
     */
    protected $driver_id_0 = null;
    /**
     * driver ID, slot #2 (co-driver)
     *
     * Generated from protobuf field <code>optional string driver_id_1 = 4;</code>
     */
    protected $driver_id_1 = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type bool $connected
     *           VU is connected
     *     @type bool $auth_valid
     *           connection is authenticated
     *     @type string $driver_id_0
     *           driver ID, slot #1 (driver)
     *     @type string $driver_id_1
     *           driver ID, slot #2 (co-driver)
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Mpp::initOnce();
        parent::__construct($data);
    }

    /**
     * VU is connected
     *
     * Generated from protobuf field <code>bool connected = 1;</code>
     * @return bool
     */
    public function getConnected()
    {
        return $this->connected;
    }

    /**
     * VU is connected
     *
     * Generated from protobuf field <code>bool connected = 1;</code>
     * @param bool $var
     * @return $this
     */
    public function setConnected($var)
    {
        GPBUtil::checkBool($var);
        $this->connected = $var;

        return $this;
    }

    /**
     * connection is authenticated
     *
     * Generated from protobuf field <code>optional bool auth_valid = 2;</code>
     * @return bool
     */
    public function getAuthValid()
    {
        return isset($this->auth_valid) ? $this->auth_valid : false;
    }

    public function hasAuthValid()
    {
        return isset($this->auth_valid);
    }

    public function clearAuthValid()
    {
        unset($this->auth_valid);
    }

    /**
     * connection is authenticated
     *
     * Generated from protobuf field <code>optional bool auth_valid = 2;</code>
     * @param bool $var
     * @return $this
     */
    public function setAuthValid($var)
    {
        GPBUtil::checkBool($var);
        $this->auth_valid = $var;

        return $this;
    }

    /**
     * driver ID, slot #1 (driver)
     *
     * Generated from protobuf field <code>optional string driver_id_0 = 3;</code>
     * @return string
     */
    public function getDriverId0()
    {
        return isset($this->driver_id_0) ? $this->driver_id_0 : '';
    }

    public function hasDriverId0()
    {
        return isset($this->driver_id_0);
    }

    public function clearDriverId0()
    {
        unset($this->driver_id_0);
    }

    /**
     * driver ID, slot #1 (driver)
     *
     * Generated from protobuf field <code>optional string driver_id_0 = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setDriverId0($var)
    {
        GPBUtil::checkString($var, True);
        $this->driver_id_0 = $var;

        return $this;
    }

    /**
     * driver ID, slot #2 (co-driver)
     *
     * Generated from protobuf field <code>optional string driver_id_1 = 4;</code>
     * @return string
     */
    public function getDriverId1()
    {
        return isset($this->driver_id_1) ? $this->driver_id_1 : '';
    }

    public function hasDriverId1()
    {
        return isset($this->driver_id_1);
    }

    public function clearDriverId1()
    {
        unset($this->driver_id_1);
    }

    /**
     * driver ID, slot #2 (co-driver)
     *
     * Generated from protobuf field <code>optional string driver_id_1 = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setDriverId1($var)
    {
        GPBUtil::checkString($var, True);
        $this->driver_id_1 = $var;

        return $this;
    }

}

